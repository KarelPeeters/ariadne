# This file is part of ariadne.
#
# ariadne is free software: you can redistribute it and/or modify it under
# the terms of the GNU General Public License as published by the Free Software
# Foundation, either version 3 of the License, or (at your option) any later
# version.
#
# ariadne is distributed in the hope that it will be useful, but WITHOUT ANY
# WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A
# PARTICULAR PURPOSE. See the GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License along with
# ariadne. If not, see <https://www.gnu.org/licenses/>.

name: Make an AppImage release of Ariadne

on:
  push:
    #tags:
    #  - "RELEASE_V[0-9]+.[0-9]+.[0-9]+"

jobs:

  #build_and_test:
  #  uses: ./.github/workflows/check_regression.yaml

  # The create-release job runs purely to initialize the GitHub release itself,
  # and names the release after the `RELEASE_Vx.y.z` tag that was pushed. It's
  # separate from building the release so that we only create the release once.
  create_release:
    name: create_release
    #needs: ["build_and_test"]
    runs-on: ubuntu-20.04
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: true

      - name: Get the release version from the tag
        shell: bash
        run: echo "RELEASE_VERSION=${{ github.ref_name }}" >> $GITHUB_ENV

      - name: Show the version
        shell: bash
        run: |
          echo "version is: $RELEASE_VERSION"

      - name: Create GitHub release
        shell: bash
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: gh release create $RELEASE_VERSION
                               --notes "New release"
                               --draft
                               #--verify-tag
                               #--title $RELEASE_VERSION

    outputs:
      version: ${{ env.RELEASE_VERSION }}


  build_release:
    name: build_release
    needs: ["create_release"]
    runs-on: ubuntu-20.04

    steps:
      - uses: actions/checkout@v4
        with:
          submodules: true

      - uses: ./.github/actions/setup_env/

      - name: Checkout the glibc_version_header repository
        uses: actions/checkout@v4
        with:
          repository: wheybags/glibc_version_header
          path: glibc_version_header

      - name: Set the build directory for the packages
        shell: bash
        run: |
          package_build_dir="${{ github.workspace }}/package_build_dir"
          mkdir -p $package_build_dir
          echo "PACKAGE_BUILD_DIR=$package_build_dir" >> $GITHUB_ENV

      - name: Set the install directory for the packages
        shell: bash
        run: |
          package_install_dir="${{ github.workspace }}/package_install_dir"
          mkdir -p $package_install_dir
          echo "PACKAGE_INSTALL_DIR=$package_install_dir" >> $GITHUB_ENV

      #- name: Set the version number for Python
      #  shell: bash
      #  run: echo "PYTHON_VERSION=3.10.12" >> $GITHUB_ENV

      #- name: Install the Python package
      #  shell: bash
      #  run: |
      #    cd $PACKAGE_BUILD_DIR
      #    wget https://www.python.org/ftp/python/$PYTHON_VERSION/Python-$PYTHON_VERSION.tgz
      #    tar -zxf Python-$PYTHON_VERSION.tgz
      #    mkdir Python-$PYTHON_VERSION.build
      #    cd Python-$PYTHON_VERSION.build
      #    ../Python-$PYTHON_VERSION/configure --prefix=$PACKAGE_INSTALL_DIR/python/$PYTHON_VERSION --enable-shared --enable-optimizations
      #    make -j 16
      #    make install

      #- name: Update the PATH variable to use the new Python from now on
      #  shell: bash
      #  run: |
      #    echo "$PACKAGE_INSTALL_DIR/python/$PYTHON_VERSION/bin" >> $GITHUB_PATH
      #    echo "LD_LIBRARY_PATH=$PACKAGE_INSTALL_DIR/python/$PYTHON_VERSION/lib:$LD_LIBRARY_PATH" >> $GITHUB_ENV

      - name: Set the version number for Ruby
        shell: bash
        run: |
          echo "RUBY_VERSION=3.2.4" >> $GITHUB_ENV
          echo "RUBY_VERSION_SHORT=3.2" >> $GITHUB_ENV

      - name: Install the Ruby package
        shell: bash
        run: |
          cd $PACKAGE_BUILD_DIR
          wget https://cache.ruby-lang.org/pub/ruby/$RUBY_VERSION_SHORT/ruby-$RUBY_VERSION.tar.gz
          tar -zxf ruby-$RUBY_VERSION.tar.gz
          mkdir ruby-$RUBY_VERSION.build
          cd ruby-$RUBY_VERSION.build
          echo $CFLAGS
          echo "PACKAGE_INSTALL_DIR=$package_install_dir" >> $GITHUB_ENV
          #export CFLAGS="$CFLAGS -include ${{ github.workspace }}/glibc_version_header/version_headers/x64/force_link_glibc_2.27.h"
          #export CXXFLAGS="$CXXFLAGS -include ${{ github.workspace }}/glibc_version_header/version_headers/x64/force_link_glibc_2.27.h"
          echo $CFLAGS
          ../ruby-$RUBY_VERSION/configure CFLAGS="$CFLAGS -include ${{ github.workspace }}/glibc_version_header/version_headers/x64/force_link_glibc_2.27.h" \
                                          --prefix=$PACKAGE_INSTALL_DIR/ruby/$RUBY_VERSION \
                                          --enable-shared \
                                          --enable-load-relative
          make -j 16
          make install

      - name: Update the PATH variable to use the new Ruby from now on
        shell: bash
        run: |
          echo "$PACKAGE_INSTALL_DIR/ruby/$RUBY_VERSION/bin" >> $GITHUB_PATH
          echo "LD_LIBRARY_PATH=$PACKAGE_INSTALL_DIR/ruby/$RUBY_VERSION/lib:$LD_LIBRARY_PATH" >> $GITHUB_ENV

      - name: Print debug info
        shell: bash
        run: |
          echo $PATH
          echo $LD_LIBRARY_PATH
          ls -l $PACKAGE_INSTALL_DIR/python/$PYTHON_VERSION/bin/python3

      - name: Configure CMake for Ariadne
        shell: bash
        run: MY_RUBY_HOME=$PACKAGE_INSTALL_DIR/ruby/$RUBY_VERSION
             cmake -B $PACKAGE_BUILD_DIR/ariadne
                   -S ${{ github.workspace }}
                   -D SCRIPT_RUBY=ON
                   -D SCRIPT_PYTHON=ON
                   -D CMAKE_INSTALL_PREFIX=$PACKAGE_INSTALL_DIR/ariadne

      - name: Build Ariadne with CMake
        shell: bash
        run: cmake --build $PACKAGE_BUILD_DIR/ariadne
                   -j 16

      - name: Install Ariadne with CMake
        shell: bash
        run: cmake --install $PACKAGE_BUILD_DIR/ariadne

      - name: Extract the Ariadne version number
        shell: bash
        run: |
          ariadne_version=$(ls $PACKAGE_INSTALL_DIR/ariadne)
          echo "ARIADNE_VERSION=$ariadne_version" >> $GITHUB_ENV

      - name: Set the directory for creating the AppImage
        shell: bash
        run: |
          appimage_dir="${{ github.workspace }}/appimage_dir"
          mkdir -p $appimage_dir
          echo "APPIMAGE_DIR=$appimage_dir" >> $GITHUB_ENV

      - name: Copy the necessary GCC libs into the AppImage
        shell: bash
        run: |
          mkdir -p $APPIMAGE_DIR/gcc/lib64
          lib_file_path=$(gcc -print-file-name=libgcc_s.so)
          cp -a $lib_file_path $APPIMAGE_DIR/gcc/lib64
          lib_file_path=$(gcc -print-file-name=libgcc_s.so.1)
          cp -a $lib_file_path $APPIMAGE_DIR/gcc/lib64
          lib_file_path=$(gcc -print-file-name=libstdc++.so)
          cp -a $lib_file_path $APPIMAGE_DIR/gcc/lib64
          lib_file_path=$(gcc -print-file-name=libstdc++.so.6)
          cp -a ${lib_file_path}* $APPIMAGE_DIR/gcc/lib64

      - name: Copy the necessary Python libs into the AppImage
        shell: bash
        run: cp -a $PACKAGE_INSTALL_DIR/python $APPIMAGE_DIR

      - name: Copy the necessary Ruby libs into the AppImage
        shell: bash
        run: cp -a $PACKAGE_INSTALL_DIR/ruby $APPIMAGE_DIR

      - name: Copy the necessary Ariadne libs into the AppImage
        shell: bash
        run: cp -a $PACKAGE_INSTALL_DIR/ariadne $APPIMAGE_DIR

      - name: Create the AppRun script
        shell: bash
        run: |
          touch $APPIMAGE_DIR/AppRun
          echo "#! /bin/sh -e

          PREFIX=\$APPDIR
          export LD_LIBRARY_PATH=\$PREFIX/gcc/lib64
          export PATH=\$PREFIX/python/$PYTHON_VERSION/bin:\$PATH
          export LD_LIBRARY_PATH=\$PREFIX/python/$PYTHON_VERSION/lib:\$LD_LIBRARY_PATH
          export PATH=\$PREFIX/ruby/$RUBY_VERSION/bin:\$PATH
          export LD_LIBRARY_PATH=\$PREFIX/ruby/$RUBY_VERSION/lib:\$LD_LIBRARY_PATH
          export PATH=\$PREFIX/ariadne/$ARIADNE_VERSION/bin:\$PATH
          export PYTHONHOME=\$PREFIX/python/$PYTHON_VERSION

          ariadne \"\$@\"" > $APPIMAGE_DIR/AppRun

      - name: Make the AppRun script executable
        shell: bash
        run: chmod +x $APPIMAGE_DIR/AppRun

      - name: Create a desktop file for Ariadne
        shell: bash
        run: |
          touch $APPIMAGE_DIR/ariadne.desktop
          echo "[Desktop Entry]
          Name=ariadne
          Exec=ariadne
          Icon=ariadne_icon
          Type=Application
          Categories=Utility" > $APPIMAGE_DIR/ariadne.desktop

      - name: Copy an icon to the AppImage for Ariadne
        shell: bash
        run: cp doc/images/ariadne_icon.png $APPIMAGE_DIR/

      - name: Install packages for creating the AppImage
        shell: bash
        run: sudo apt-get install -y fuse
                                     libfuse2

      - name: Build the AppImage of Ariadne
        shell: bash
        run: |
          wget https://github.com/AppImage/AppImageKit/releases/download/13/appimagetool-x86_64.AppImage
          chmod +x appimagetool-x86_64.AppImage
          ARCH=x86_64 ./appimagetool-x86_64.AppImage $APPIMAGE_DIR
          echo "ARIADNE_APPIMAGE=ariadne-x86_64.AppImage" >> $GITHUB_ENV

      - name: Determine archive name
        shell: bash
        run: |
          version="${{ needs.create_release.outputs.version }}"
          echo "ARCHIVE=ariadne_$version" >> $GITHUB_ENV

      - name: Creating directory for the archive
        shell: bash
        run: |
          mkdir -p "$ARCHIVE"/{bin,doc}
          cp $ARIADNE_APPIMAGE "$ARCHIVE"/bin/
          cp -a ruby "$ARCHIVE"/
          cp README.md "$ARCHIVE"/
          cp gpl-3.0.html "$ARCHIVE"/
          cp doc/ariadne.adoc "$ARCHIVE"/doc/
          cp $PACKAGE_BUILD_DIR/ariadne/doc/ariadne.1 "$ARCHIVE"/doc/
          cp $PACKAGE_BUILD_DIR/ariadne/doc/ariadne.pdf "$ARCHIVE"/doc/
          cp $PACKAGE_BUILD_DIR/ariadne/doc/ariadne.html "$ARCHIVE"/doc/
          cp -a doc/images/ "$ARCHIVE"/doc/

      - name: Build archive (Unix)
        shell: bash
        run: |
          tar -czf "$ARCHIVE.tar.gz" "$ARCHIVE"
          shasum -a 256 "$ARCHIVE.tar.gz" > "$ARCHIVE.tar.gz.sha256"
          echo "ASSET=$ARCHIVE.tar.gz" >> $GITHUB_ENV
          echo "ASSET_SUM=$ARCHIVE.tar.gz.sha256" >> $GITHUB_ENV

      - name: Upload release archive
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        shell: bash
        run: |
          version="${{ needs.create_release.outputs.version }}"
          gh release upload "$version" ${{ env.ASSET }} ${{ env.ASSET_SUM }} --clobber
