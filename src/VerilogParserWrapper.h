// This file is part of ariadne.
//
// ariadne is free software: you can redistribute it and/or modify it under
// the terms of the GNU General Public License as published by the Free Software
// Foundation, either version 3 of the License, or (at your option) any later
// version.
//
// ariadne is distributed in the hope that it will be useful, but WITHOUT ANY
// WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A
// PARTICULAR PURPOSE. See the GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License along with
// ariadne. If not, see <https://www.gnu.org/licenses/>.

#ifndef VerilogParserWrapper_h_
#define VerilogParserWrapper_h_

#include "ASTTraversalverilog.h"
#include "Context.h"

class Module;
class SignalPort;

// Name looks very much like verilogParser but verilogParser is generated by
// wisent and this class is hand written.  Both classes do some part of parsing
// the verilog (this class uses the other one) and I did not find a better name.
class VerilogParserWrapper : public ASTTraversalverilog
{
public:
  VerilogParserWrapper(Module * module);
  ~VerilogParserWrapper();

  void parseFile(const std::string & filename);

  void module_start(AST & node) override;
  void module_end_exit(AST & node) override;
  void module_item(AST & node) override;
  void module_item_exit(AST & node) override;
  void module_parameter_port_list(AST & node) override;
  void module_parameter_port_list_exit(AST & node) override;
  void port_declaration(AST & node) override;
  void module_port_declaration(AST & node) override;
  void list_of_port_declarations(AST & node) override;
  void list_of_port_declarations_exit(AST & node) override;
  void parameter_assign(AST & node) override;

private:
  enum E_InterfMode { NONE, PORTS, GENERICS };

  // remove leading, trailing and double spaces
  std::string normalizeString(const std::string & s);
  CaseAwareString getType(const AST & net_type_opt, const AST * range_opt);

  Module * module_;
  bool correctEntity_;
  std::string filename_;

  bool inTask_;
  bool inModuleParameterPortList_;
  bool moduleParameterPortListExists_;

  SignalPort * last_port_declaration_;
};

#endif
