# This file is part of ariadne.
#
# ariadne is free software: you can redistribute it and/or modify it under
# the terms of the GNU General Public License as published by the Free Software
# Foundation, either version 3 of the License, or (at your option) any later
# version.
#
# ariadne is distributed in the hope that it will be useful, but WITHOUT ANY
# WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A
# PARTICULAR PURPOSE. See the GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License along with
# ariadne. If not, see <https://www.gnu.org/licenses/>.

# EASICS generated file
# command : cma test
# input : $(SOURCES) $(HEADERS) 
#
# This Makefile was generated by cma
# cma was written by Steven Coenen @ Easics
#
# You can modify HEADERS, SOURCES and vpath
# If you add a source, be sure the directory is in vpath
#
ifndef VERBOSE
.SILENT:
endif

MAKEFILENAME := cmaMakefile.test

OSTYPE := $(shell uname -s)
OBJDIR := objects
DEPDIR := objects
BINDIR := .

HEADERS := \
  a.h \
  test.h

SOURCES := \
  test.C

ALL_SOURCES := $(SOURCES) \


VPATH_DIRS := \
  . \

vpath %.C $(VPATH_DIRS)
vpath %.cpp $(VPATH_DIRS)
vpath %.c $(VPATH_DIRS)
vpath %.cc $(VPATH_DIRS)
vpath %.h $(VPATH_DIRS)
vpath %.hh $(VPATH_DIRS)
vpath %.hpp $(VPATH_DIRS)
vpath %.l $(VPATH_DIRS)
vpath %.y $(VPATH_DIRS)


OBJECTS_WRONG_DIR := $(foreach source, $(ALL_SOURCES), $(basename $(source)).o)
OBJECTS := $(addprefix $(OBJDIR)/, $(notdir $(OBJECTS_WRONG_DIR)))
DEPS_WRONG_DIR := $(OBJECTS_WRONG_DIR:.o=.d)
DEPENDENCIES := $(addprefix $(DEPDIR)/, $(notdir $(DEPS_WRONG_DIR)))
EXENAME := test
TARGET := $(BINDIR)/$(EXENAME)
LIBS := \
  
LIB_DIRS := \
  
GENERATED_FILES := \
  
CC := gcc
CCC := g++
LINKER := g++
LEX := flex
YACC := bison
MOC := moc
MAKEDEPEND := $(CC) -MM

INCLUDEDIRS := \
  .

INCLUDEFLAGS := $(addprefix -I, $(INCLUDEDIRS))
CFLAGS := $(INCLUDEFLAGS) -g -Wall 
CXXFLAGS := $(CFLAGS)
CPPFLAGS := $(CFLAGS)
EXTRA_LIBS := 
EXTRA_LIB_DIRS := 
ifeq ($(OSTYPE), Linux)
SO_OPTION_NAME := soname
else
SO_OPTION_NAME := h
endif
LDFLAGS :=  \
           $(addprefix -L, $(LIB_DIRS)) \
           $(addprefix -l, $(LIBS)) \
           $(addprefix -L, $(EXTRA_LIB_DIRS)) \
           $(addprefix -l, $(EXTRA_LIBS)) \

define mkdir_target
test -d $(@D) \
  || ( echo "Creating directory $(@D)" && mkdir -p $(@D) ) \
  || echo Unable to create $(@D); 
endef


$(TARGET) : $(OBJECTS) 
	$(mkdir_target)
	@echo Linking $@
	$(LINKER) -o $@ $(filter %.o, $^) $(LDFLAGS)

clean:
	@echo Removing objects
	-rm -f $(OBJECTS) > /dev/null 2>&1
	@echo Removing dependencies
	-rm -f $(DEPENDENCIES) > /dev/null 2>&1
	@echo Removing generated files
	-rm -f $(GENERATED_FILES) > /dev/null 2>&1
realclean: clean
	@echo Removing $(TARGET)
	-rm -f $(TARGET) > /dev/null 2>&1
distclean: realclean
	@echo Removing $(MAKEFILENAME)
	@rm -f $(MAKEFILENAME)

hgrep:
	if [ -z "$(T)" ]; then \
	  echo "grep needs something to grep for"; \
	  echo "e.g. make hgrep T=something"; \
	else \
	  grep "$(T)" $(HEADERS); \
	fi

cgrep:
	if [ -z "$(T)" ]; then \
	  echo "grep needs something to grep for"; \
	  echo "e.g. make cgrep T=something"; \
	else \
	  grep "$(T)" $(ALL_SOURCES); \
	fi

grep:
	if [ -z "$(T)" ]; then \
	  echo "grep needs something to grep for"; \
	  echo "e.g. make grep T=something"; \
	else \
	  grep "$(T)" $(HEADERS) $(ALL_SOURCES); \
	fi

update:
	need_update=0; \
	for file in $(HEADERS) $(ALL_SOURCES) ; do \
	  if [ "$$file" -nt "cmaMakefile.test" ]; then \
	    need_update=1; break; \
	  fi; \
	done; \
	for file in $(DEPENDENCIES); do \
	  if [ ! -f "$$file" ]; then \
	    need_update=1; break; \
	  fi; \
	done; \
	if [ $$need_update = 1 ]; then \
	  echo Rerunning cma; \
	  rm -f "cmaMakefile.test"; \
	  cma -f "cma.ini" "test"; \
	fi

echo-cflags:
	echo $(CFLAGS)

echo-ldflags:
	echo $(LDFLAGS)

help:
	echo 'Available make targets :'
	echo '  $(TARGET) : Build the target.  This is the default'
	echo '  clean     : Erase object files, dependency files and other'
	echo '              generated files (moc, lex, yacc, ...)'
	echo '  realclean : = clean + erase target'
	echo '  distclean : = realclean + erase makefile'
	echo '  hgrep     : grep all header files for a string. The string'
	echo '              is in variable T'
	echo '              e.g. make hgrep T="foo"'
	echo '  cgrep     : grep all source files'
	echo '  grep      : grep header and source files'
	echo '  update    : Update the makefile if necessary, i.e. if one of'
	echo '              sources or headers are newer than the makefile,'
	echo '              cma will be executed to regenerate the makefile.'
	echo '  printvar  : Print the value of a Makefile variable.'
.PHONY: clean realclean distclean hgrep cgrep grep update help


%.lex.C : %.l
	@echo Lexing $<
	$(LEX) -P$(notdir $*) -o $(dir $^)/$(notdir $@) $^

%.tab.C %.tab.h : %.y
	@echo Yaccing $^
	$(YACC) -d -p $(notdir $*) -o $(dir $^)/$(notdir $*).tab.C $^
	cd $(dir $^); \
	if [ -f $(notdir $*).tab.C.h ]; then \
	  mv $(notdir $*).tab.C.h $(notdir $*).tab.h; \
	elif [ -f $(notdir $*).tab.hh ]; then \
	  mv $*.tab.hh $*.tab.h; \
	elif [ -f $(notdir $*).tab.hpp ]; then \
	  mv $(notdir $*).tab.hpp $(notdir $*).tab.h; \
	else \
	  mv $(notdir $*).tab.H $(notdir $*).tab.h || true; \
	fi; \
	sed -i "s/\<$(notdir $*).tab.H\>/$(notdir $*).tab.h/" $(notdir $*).tab.C

$(OBJDIR)/%.o : %.C
	$(mkdir_target)
	@echo Compiling $<
	$(CCC) -c -o $@ $< $(CXXFLAGS)

$(DEPDIR)/%.d : %.C
	$(mkdir_target)
	@echo Adjusting dependencies of $< ...
	$(SHELL) -ec '$(MAKEDEPEND) $(CPPFLAGS) $< \
	| sed '\''s/$(notdir $*)\.o[ ]*:/$(subst /,\/,$(OBJDIR))\/$(notdir $*).o $(subst /,\/,$@) : $(subst /,\/,) /g'\'' > $@; \
	[ -s $@ ] || (rm -f $@; exit 0)'

$(OBJDIR)/%.o : %.cpp
	$(mkdir_target)
	@echo Compiling $<
	$(CCC) -c -o $@ $< $(CXXFLAGS)

$(DEPDIR)/%.d : %.cpp
	$(mkdir_target)
	@echo Adjusting dependencies of $< ...
	$(SHELL) -ec '$(MAKEDEPEND) $(CPPFLAGS) $< \
	| sed '\''s/$(notdir $*)\.o[ ]*:/$(subst /,\/,$(OBJDIR))\/$(notdir $*).o $(subst /,\/,$@) : $(subst /,\/,) /g'\'' > $@; \
	[ -s $@ ] || (rm -f $@; exit 0)'

$(OBJDIR)/%.o : %.c
	$(mkdir_target)
	@echo Compiling $<
	$(CC) -c -o $@ $< $(CFLAGS)

$(DEPDIR)/%.d : %.c
	$(mkdir_target)
	@echo Adjusting dependencies of $< ...
	$(SHELL) -ec '$(MAKEDEPEND) $(CPPFLAGS) $< \
	| sed '\''s/$(notdir $*)\.o[ ]*:/$(subst /,\/,$(OBJDIR))\/$(notdir $*).o $(subst /,\/,$@) : $(subst /,\/,) /g'\'' > $@; \
	[ -s $@ ] || (rm -f $@; exit 0)'

$(OBJDIR)/%.o : %.cc
	$(mkdir_target)
	@echo Compiling $<
	$(CCC) -c -o $@ $< $(CXXFLAGS)

$(DEPDIR)/%.d : %.cc
	$(mkdir_target)
	@echo Adjusting dependencies of $< ...
	$(SHELL) -ec '$(MAKEDEPEND) $(CPPFLAGS) $< \
	| sed '\''s/$(notdir $*)\.o[ ]*:/$(subst /,\/,$(OBJDIR))\/$(notdir $*).o $(subst /,\/,$@) : $(subst /,\/,) /g'\'' > $@; \
	[ -s $@ ] || (rm -f $@; exit 0)'


cmaMakefile.test: FORCE
	need_rerun=0; \
	for f in $(DEPENDENCIES); do \
	  if [ ! -f $$f ]; then continue; fi; \
	  deps=`cat $$f | sed -e '1d' -e 's/\\\\//'`; \
	  for f2 in $$deps; do \
	    if [ ! -f $$f2 ]; then \
	      echo "Removing $$f"; \
	      need_rerun=1; \
	      rm $$f; break; \
	    fi; \
	  done; \
	done; \
	if [ $$need_rerun = '1' ]; then \
	  if which cma > /dev/null; then \
	    echo "Rerunning cma"; \
	    rm -f "cmaMakefile.test"; \
	    cma -f "cma.ini" "test"; \
	  fi; \
	  $(MAKE) -f $(MAKEFILENAME) $(MAKECMDGOALS); \
	fi

FORCE:

.PHONY: FORCE

.PRECIOUS: cmaMakefile.test

printvar:
	echo $($(VAR))

ifneq ($(MAKECMDGOALS), clean)
ifneq ($(MAKECMDGOALS), realclean)
ifneq ($(MAKECMDGOALS), distclean)
ifneq ($(MAKECMDGOALS), update)
ifneq ($(MAKECMDGOALS), printvar)
ifneq ($(MAKECMDGOALS), grep)
ifneq ($(MAKECMDGOALS), hgrep)
ifneq ($(MAKECMDGOALS), cgrep)
ifneq ($(MAKECMDGOALS), help)
-include $(DEPENDENCIES)
endif
endif
endif
endif
endif
endif
endif
endif
endif
